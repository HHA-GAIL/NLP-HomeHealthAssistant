/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import GaleDTRules.DAO.GalePatientDAO;
import GaleDTRules.Classes.*;
import GaleDTRules.DAO.GaleBMIDevDAO;
import GaleDTRules.DAO.GaleDTRulesDAO;
import GaleDTRules.DAO.GaleFloorsDevDAO;
import GaleDTRules.DAO.GaleHRDevDAO;
import GaleDTRules.DAO.GaleSleepDevDAO;
import GaleDTRules.DAO.GaleStepsDevDAO;
import GaleDTRules.DAO.GaleWeightDevDAO;
import GaleDTRules.Tools.DTRulesXML;
import static GaleDTRules.Tools.DTRulesXML.BASEPATH;
import com.sun.javafx.scene.control.skin.VirtualFlow;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.PrintStream;
import java.lang.reflect.Method;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.filechooser.FileFilter;
import javax.swing.table.DefaultTableModel;
import jdk.nashorn.internal.runtime.regexp.joni.constants.CCVALTYPE;

/**
 *
 * @author HASEE
 */
public class dtRulesTestingGUI extends javax.swing.JFrame {

    List<Patients> patientList = new LinkedList<>();
    private String RuleSetString = null;
    private String EntryTable = null;
    
    private boolean Compiled = false;
    private boolean EntryTable_Confirmed = false;
    private boolean Tested = false;
    
    /**
     * Creates new form dtRulesTestingGUI
     */
    public dtRulesTestingGUI() {
        initComponents();
        this.setTitle("DTRulesTesting...");
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        INPT_PName = new javax.swing.JTextField();
        Btn_Search = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TA_PatientInfo = new javax.swing.JTextArea();
        Btn_Run = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        TA_Results = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        TF_SelectedFile = new javax.swing.JTextField();
        Btn_SelectDT = new javax.swing.JButton();
        Btn_ComplieDT = new javax.swing.JButton();
        Btn_UploadDT = new javax.swing.JButton();
        Select_EntryTable = new javax.swing.JComboBox<>();
        Btn_EntryTableConfirm = new javax.swing.JButton();
        Btn_RunSelectedDT = new javax.swing.JButton();
        CB_BMI = new javax.swing.JCheckBox();
        CB_Floors = new javax.swing.JCheckBox();
        CB_HR = new javax.swing.JCheckBox();
        CB_Sleep = new javax.swing.JCheckBox();
        CB_Steps = new javax.swing.JCheckBox();
        CB_Weight = new javax.swing.JCheckBox();
        jScrollPane3 = new javax.swing.JScrollPane();
        TA_CompileMsg = new javax.swing.JTextArea();
        TB_RuleSetName = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Btn_Search.setText("Search");
        Btn_Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_SearchActionPerformed(evt);
            }
        });

        jLabel2.setText("Patient's Name:");

        TA_PatientInfo.setEditable(false);
        TA_PatientInfo.setColumns(20);
        TA_PatientInfo.setLineWrap(true);
        TA_PatientInfo.setRows(5);
        TA_PatientInfo.setText("The information of the certain Patient will be placed here...\nNow the EDD is fixed..\nAnd the selected decision table should use the data entities defined by the EDD...\n");
        jScrollPane1.setViewportView(TA_PatientInfo);

        Btn_Run.setText("Run in DTRulesEngine...");
        Btn_Run.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_RunActionPerformed(evt);
            }
        });

        TA_Results.setEditable(false);
        TA_Results.setColumns(20);
        TA_Results.setRows(5);
        TA_Results.setText("The result will be placed here...");
        jScrollPane2.setViewportView(TA_Results);

        jLabel3.setText("Select your excel file, it should be a decision table.");

        TF_SelectedFile.setEditable(false);

        Btn_SelectDT.setText("...");
        Btn_SelectDT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_SelectDTActionPerformed(evt);
            }
        });

        Btn_ComplieDT.setText("Compile the DT");
        Btn_ComplieDT.setEnabled(false);
        Btn_ComplieDT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_ComplieDTActionPerformed(evt);
            }
        });

        Btn_UploadDT.setText("Upload");
        Btn_UploadDT.setEnabled(false);
        Btn_UploadDT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_UploadDTActionPerformed(evt);
            }
        });

        Select_EntryTable.setEnabled(false);

        Btn_EntryTableConfirm.setText("Confirm");
        Btn_EntryTableConfirm.setEnabled(false);
        Btn_EntryTableConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_EntryTableConfirmActionPerformed(evt);
            }
        });

        Btn_RunSelectedDT.setText("Run the selected DT...");
        Btn_RunSelectedDT.setEnabled(false);
        Btn_RunSelectedDT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_RunSelectedDTActionPerformed(evt);
            }
        });

        CB_BMI.setText("BMI");
        CB_BMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CB_BMIActionPerformed(evt);
            }
        });

        CB_Floors.setText("Floors");
        CB_Floors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CB_FloorsActionPerformed(evt);
            }
        });

        CB_HR.setText("HR");
        CB_HR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CB_HRActionPerformed(evt);
            }
        });

        CB_Sleep.setText("Sleep");
        CB_Sleep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CB_SleepActionPerformed(evt);
            }
        });

        CB_Steps.setText("Steps");
        CB_Steps.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CB_StepsActionPerformed(evt);
            }
        });

        CB_Weight.setText("Weight");
        CB_Weight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CB_WeightActionPerformed(evt);
            }
        });

        TA_CompileMsg.setColumns(20);
        TA_CompileMsg.setRows(5);
        TA_CompileMsg.setText("The Compile Message will be placed here...\n");
        jScrollPane3.setViewportView(TA_CompileMsg);

        jLabel4.setText("Please input your RuleSet's name:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(CB_Sleep)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CB_Steps)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CB_Weight)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CB_BMI)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CB_Floors)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CB_HR)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Btn_UploadDT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Btn_Run, javax.swing.GroupLayout.DEFAULT_SIZE, 320, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(Btn_RunSelectedDT, javax.swing.GroupLayout.PREFERRED_SIZE, 422, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(INPT_PName, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Btn_Search))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Select_EntryTable, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Btn_EntryTableConfirm))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(TF_SelectedFile, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(TB_RuleSetName, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(Btn_SelectDT, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Btn_ComplieDT)))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TB_RuleSetName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TF_SelectedFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Btn_SelectDT)
                    .addComponent(Btn_ComplieDT))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Select_EntryTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Btn_EntryTableConfirm, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(INPT_PName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Btn_Search))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Btn_Run)
                    .addComponent(Btn_RunSelectedDT))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CB_Sleep)
                    .addComponent(CB_Steps)
                    .addComponent(CB_Weight)
                    .addComponent(CB_BMI)
                    .addComponent(CB_Floors)
                    .addComponent(CB_HR)
                    .addComponent(Btn_UploadDT))
                .addGap(5, 5, 5))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Btn_SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_SearchActionPerformed
        // TODO add your handling code here:
        WriteTA(TA_PatientInfo,"\nGetting Patient info from database...\n"+System.getProperty("user.dir")+"/DTRules/");
        String patientName = INPT_PName.getText();
        GalePatientDAO pdao = new GalePatientDAO();
        Object result = pdao.getTableModel(patientName);
        DefaultTableModel dt = (DefaultTableModel)result;
        int rows = dt.getRowCount();
        int columns = dt.getColumnCount();
        Vector vct = dt.getDataVector();
        WriteTA(TA_PatientInfo,"\nDone.\nData rows:"+rows+"---Data columns:"+columns);
        for(int i = 0; i < rows; i++){//for each row
            Vector data = (Vector)vct.get(i);
            Patients tmp = new Patients();
            Class clazz = tmp.getClass();
            for(int j = 0; j < columns; j++){//for each column
                WriteTA(TA_PatientInfo, "\n"+dt.getColumnName(j)+":"+data.get(j));
                try{
                    Method m = clazz.getMethod("set"+dt.getColumnName(j), Object.class);
                    m.invoke(tmp, data.get(j));
                }catch(Exception e){
                    System.out.println(e.getMessage());
                }
            }
            //Get the all six Dev data from database here
            List<BMI_Dev> bmilist = GetBMIDevFromDB(tmp.getPatientID());
            List<Floors_Dev> floorlist = GetFloorsDevFromDB(tmp.getPatientID());
            List<HR_Dev> hrlist = GetHRDevFromDB(tmp.getPatientID());
            List<Sleep_Dev> sleeplist = GetSleepDevFromDB(tmp.getPatientID());
            List<Steps_Dev> stepslist = GetStepsDevFromDB(tmp.getPatientID());
            List<Weight_Dev> weightlist = GetWeightDevFromDB(tmp.getPatientID());
            tmp.setBMI_Devs(bmilist);
            tmp.setFloors_Devs(floorlist);
            tmp.setHR_Devs(hrlist);
            tmp.setSleep_Devs(sleeplist);
            tmp.setSteps_Devs(stepslist);
            tmp.setWeight_Devs(weightlist);
            patientList.add(tmp);
        }
        SimpleDateFormat bartDateFormat = new SimpleDateFormat("yyyy-MM-dd");
//        for(Patients pt: patientList){
//            WriteTA(TA_Results, "\nname:"+pt.getFullName());
//            WriteTA(TA_Results, "\nage:"+pt.getAge());
//            WriteTA(TA_Results, "\ngender"+pt.getGender());
//            if(pt.getMemberSince() != null)
//                WriteTA(TA_Results, "\nmember since:"+bartDateFormat.format(pt.getMemberSince()));
//        }
//        WriteTA(TA_PatientInfo, "\n\nDONE!");
    }//GEN-LAST:event_Btn_SearchActionPerformed

    private void Btn_RunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_RunActionPerformed
        // TODO add your handling code here:
        edu.dhu.DTRules.entities.Patient patient = com.dtrules.samples.sampleproject2.DataGenerater.GenerateDTRulesPatient();
//        if(patientList.size() == 0)
//            return;
        try{
            edu.dhu.DTRules.DTRulesPatientDev dtrpd = new edu.dhu.DTRules.DTRulesPatientDev();
            List<edu.dhu.DTRules.entities.Result> results = dtrpd.doExamine(patient,
                    edu.dhu.DTRules.DTRulesPatientDev.BasePath , 
                    edu.dhu.DTRules.DTRulesPatientDev.ConfigFileFileName, 
                    DTRulesXML.DTName,
                    edu.dhu.DTRules.DTRulesPatientDev.EntryTable);
            WriteTA(TA_Results, "\n\nResult of patient "+patient.getFullName());
            for(edu.dhu.DTRules.entities.Result result : results){
                WriteTA(TA_Results, "\n"+result.getResultCode()+"--->"+result.getResultMessage());
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
            WriteTA(TA_Results, "\n\nError occurred: " + e.getMessage());
        }
    }//GEN-LAST:event_Btn_RunActionPerformed


    private void CheckForUpload() {
        if((CB_BMI.isSelected() || CB_Floors.isSelected() || CB_HR.isSelected()
                || CB_Sleep.isSelected() || CB_Steps.isSelected() || CB_Weight.isSelected())
                && Compiled && EntryTable_Confirmed && Tested)
            Btn_UploadDT.setEnabled(true);
        else
            Btn_UploadDT.setEnabled(false);
    }

    class ExcelFileFilter extends FileFilter {
        public String getDescription() {
            return "*.xls;*.xlsx";
        }
        public boolean accept(File file) {
            String name = file.getName();
            return file.isDirectory() || name.toLowerCase().endsWith(".xls") || name.toLowerCase().endsWith(".xlsx");
        }
    }
    private void Btn_SelectDTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_SelectDTActionPerformed
        JFileChooser jfc = new JFileChooser();
        ExcelFileFilter eff = new ExcelFileFilter();
        jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        jfc.addChoosableFileFilter(eff);
        jfc.setFileFilter(eff);
        int state = jfc.showOpenDialog(null);
        if(state == 1){
            return;
        }else{
            File f = jfc.getSelectedFile();
            TF_SelectedFile.setText(f.getAbsolutePath());
            if(TB_RuleSetName.getText() == null || TB_RuleSetName.getText().equals(""))
                TB_RuleSetName.setText(f.getName().split("[.]")[0]);
            f = null;
            Btn_ComplieDT.setEnabled(true);
        }
    }//GEN-LAST:event_Btn_SelectDTActionPerformed

    private void Btn_ComplieDTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_ComplieDTActionPerformed
        //add a method that returns the RuleSet string, save it in a temp variable...done
        //check all the directions are exists...done
        //append or create a DTRules.xml with the RuleSet string...done
        //copy the file into certain dir AND COMPILE, then we should take all decision table's name to let user to choose the entry table...done
        //Data we need: BasePath, ConfigFileFileName, RuleSetName, EntryTableName
        //The Edd xls file is fixed for now and maybe it will not be modified or we will not add new entities
        TA_CompileMsg.setText("");
        File dtFile = new File(TF_SelectedFile.getText());
        String ruleName = dtFile.getName().split("[.]")[0];
        DTRulesXML dtrxml = DTRulesXML.getInstance();
        RuleSetString = dtrxml.getRuleSetString();
        WriteTA(TA_CompileMsg, "The RuleSet Generated Info:");
        try{
            dtrxml.writeTempXmlFile(RuleSetString);
//            int checkResult = dtrxml.checkDTRules(ruleName);
//            WriteTA(TA_PatientInfo, "\nCheck result: "+checkResult+"\n");
//            if(checkResult == -1){
////                create a new DTRules.xml and its relative dirs
////                WriteTA(TA_PatientInfo, "Writting...\n\n"+dtrxml.createDTRules(RuleSetString) + "\nDONE...\n\n");
//                dtrxml.createDTRules(RuleSetString);
//            }
//            if(checkResult == 0){
//                //append the ruleset in the existed DTRules.xml
//                dtrxml.appendDTRules(RuleSetString);
//            }
//            if(checkResult == 1){
//                //replace the ruleset in the existed DTRules.xml
//                dtrxml.replaceDTRules(RuleSetString, ruleName);
//            }
            dtrxml.createDTRules(RuleSetString);
            //copy the xls file into the certain dir
            dtrxml.copyFileToCertainDir(dtFile);
            //Compile the decision table
            //Set System.out PrintStream and get the compile messages
            ByteArrayOutputStream baos = new ByteArrayOutputStream(2048);
            PrintStream cacheout = new PrintStream(baos);
            PrintStream original = System.out;
            System.setOut(cacheout);
            dtrxml.Compile();
            System.setOut(original);
            WriteTA(TA_CompileMsg, baos.toString());
            //get the decision tables from the dt xml file
            List<String> decisiontable = dtrxml.getDecisionTables(ruleName);
            for(String str : decisiontable){
                Select_EntryTable.addItem(str);
            }
            Select_EntryTable.setSelectedIndex(0);
            Select_EntryTable.setEnabled(true);
            Btn_EntryTableConfirm.setEnabled(true);
            Compiled = true;
        }
        catch(Exception e){
            e.printStackTrace();
            WriteTA(TA_PatientInfo, e.getMessage());
        }
    }//GEN-LAST:event_Btn_ComplieDTActionPerformed

    private void Btn_EntryTableConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_EntryTableConfirmActionPerformed
        EntryTable = Select_EntryTable.getItemAt(Select_EntryTable.getSelectedIndex());
        Btn_RunSelectedDT.setEnabled(true);
        EntryTable_Confirmed = true;
        WriteTA(TA_CompileMsg, "\nSelected EntryTable: "+EntryTable);
    }//GEN-LAST:event_Btn_EntryTableConfirmActionPerformed

    private void Btn_RunSelectedDTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_RunSelectedDTActionPerformed
        if(patientList.size() == 0)
            return;
        try{
            edu.dhu.DTRules.DTRulesPatientDev dtrpd = new edu.dhu.DTRules.DTRulesPatientDev();
            for(Patients pt : patientList){
                List<edu.dhu.DTRules.entities.Result> results = dtrpd.doExamine((edu.dhu.DTRules.entities.Patient)pt.ConvertToDTRulesDataType(),
                        DTRulesXML.BASEPATH , 
                        "DTRules.xml", 
                        DTRulesXML.DTName,
//                        "123",
                        EntryTable);
                if(results.size() != 0){
                    WriteTA(TA_Results, "\n\nResult of patient "+pt.getFullName());
                    for(edu.dhu.DTRules.entities.Result result : results){
                        WriteTA(TA_Results, "\n"+result.getResultCode()+"--->"+result.getResultMessage());
                    }
                }
            }
            Tested = true;
            CheckForUpload();
        }
        catch(Exception e){
            e.printStackTrace();
            WriteTA(TA_Results, "\n\nError occrred: " + e.getMessage());
        }
    }//GEN-LAST:event_Btn_RunSelectedDTActionPerformed

    private void Btn_UploadDTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_UploadDTActionPerformed
        //to upload the runnable DTRules to the database
        //we need:
        //1.RuleSetName...done
        //2.The RuleSet, content of the part of the DTRules.xml...done
        //3.The three xml file
        //4.Entry table name...done
        try{
            DTRulesXML dtrxml = DTRulesXML.getInstance();
            String DTXMLContent = dtrxml.readDTXML();// read the tmp xml file, and the RuleSetName parameter is not used at all
            System.out.println("XML String Read done...");
            GaleDTRulesDAO gdtrdao = new GaleDTRulesDAO();
            StringBuilder Attributes = new StringBuilder();
            if(CB_BMI.isSelected())
                Attributes.append("BMI;");
            if(CB_HR.isSelected())
                Attributes.append("HR;");
            if(CB_Floors.isSelected())
                Attributes.append("Floors;");
            if(CB_Sleep.isSelected())
                Attributes.append("Sleep;");
            if(CB_Steps.isSelected())
                Attributes.append("Steps;");
            if(CB_Weight.isSelected())
                Attributes.append("Weight;");
            String RuleSetName = TB_RuleSetName.getText();
            if("".equals(RuleSetName))
                WriteTA(TA_Results, "\nThe RuleSet name has not be inputed yet...");
            
            //check for the RuleName
            DefaultTableModel dt = gdtrdao.getTableModel(RuleSetName);
            int count = dt.getRowCount();
            if(count > 0){
                //has the same name of RuleName
                //should ask for overwritting
                int n=JOptionPane.showConfirmDialog(null, "There has a same name RuleSet in the database yet："+RuleSetName+".\nWould you like to overwritting the data in the database?"
                        ,"ATTENTION!",JOptionPane.YES_NO_OPTION);
                if(n == JOptionPane.OK_OPTION){
                    //up date here...
                    if(gdtrdao.updateDTRules(RuleSetName, Attributes.toString(), EntryTable, DTXMLContent))
                        WriteTA(TA_Results, "\nUpDate Done...");
                    else
                        WriteTA(TA_Results, "\nUpdate Failed...");
                }
                return;
            }
            
            if(gdtrdao.insertDTRules(RuleSetName, Attributes.toString(), EntryTable, DTXMLContent))
                WriteTA(TA_Results, "\nUpload Done...");
            else
                WriteTA(TA_Results, "\nUpload Failed...");
        }
        catch(Exception e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_Btn_UploadDTActionPerformed

    private void CB_BMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CB_BMIActionPerformed
        CheckForUpload();
    }//GEN-LAST:event_CB_BMIActionPerformed

    private void CB_FloorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CB_FloorsActionPerformed
        CheckForUpload();
    }//GEN-LAST:event_CB_FloorsActionPerformed

    private void CB_HRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CB_HRActionPerformed
        CheckForUpload();
    }//GEN-LAST:event_CB_HRActionPerformed

    private void CB_SleepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CB_SleepActionPerformed
        CheckForUpload();
    }//GEN-LAST:event_CB_SleepActionPerformed

    private void CB_StepsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CB_StepsActionPerformed
        CheckForUpload();
    }//GEN-LAST:event_CB_StepsActionPerformed

    private void CB_WeightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CB_WeightActionPerformed
        CheckForUpload();
    }//GEN-LAST:event_CB_WeightActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(dtRulesTestingGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(dtRulesTestingGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(dtRulesTestingGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(dtRulesTestingGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new dtRulesTestingGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Btn_ComplieDT;
    private javax.swing.JButton Btn_EntryTableConfirm;
    private javax.swing.JButton Btn_Run;
    private javax.swing.JButton Btn_RunSelectedDT;
    private javax.swing.JButton Btn_Search;
    private javax.swing.JButton Btn_SelectDT;
    private javax.swing.JButton Btn_UploadDT;
    private javax.swing.JCheckBox CB_BMI;
    private javax.swing.JCheckBox CB_Floors;
    private javax.swing.JCheckBox CB_HR;
    private javax.swing.JCheckBox CB_Sleep;
    private javax.swing.JCheckBox CB_Steps;
    private javax.swing.JCheckBox CB_Weight;
    private javax.swing.JTextField INPT_PName;
    private javax.swing.JComboBox<String> Select_EntryTable;
    private javax.swing.JTextArea TA_CompileMsg;
    private javax.swing.JTextArea TA_PatientInfo;
    private javax.swing.JTextArea TA_Results;
    private javax.swing.JTextField TB_RuleSetName;
    private javax.swing.JTextField TF_SelectedFile;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables

    private void WriteTA(JTextArea Ta, String message) {
        Ta.append(message);
        Ta.setCaretPosition(Ta.getDocument().getLength());
    }

    private List<BMI_Dev> GetBMIDevFromDB(int patientID) {
        List<BMI_Dev> bmi = new ArrayList<>();
        GaleBMIDevDAO pdao = new GaleBMIDevDAO();
        DefaultTableModel dt = pdao.getTableModel(patientID);
        int rows = dt.getRowCount();
        int columns = dt.getColumnCount();
        Vector vct = dt.getDataVector();
        WriteTA(TA_PatientInfo,"\n\n\nBMI:\nData rows:"+rows+"---Data columns:"+columns);
        for(int i = 0; i < rows; i++){//for each row
            Vector data = (Vector)vct.get(i);
            BMI_Dev tmp = new BMI_Dev();
            Class clazz = tmp.getClass();
            for(int j = 0; j < columns; j++){//for each column
                WriteTA(TA_PatientInfo, "\n"+dt.getColumnName(j)+":"+data.get(j));
                try{
                    Method m = clazz.getMethod("set"+dt.getColumnName(j), Object.class);
                    m.invoke(tmp, data.get(j));
                }catch(Exception e){
                    System.out.println(e.getMessage());
                }
            }
            bmi.add(tmp);
        }
        return bmi;
    }

    private List<Floors_Dev> GetFloorsDevFromDB(int patientID) {
        List<Floors_Dev> flr = new ArrayList<>();
        GaleFloorsDevDAO pdao = new GaleFloorsDevDAO();
        DefaultTableModel dt = pdao.getTableModel(patientID);
        int rows = dt.getRowCount();
        int columns = dt.getColumnCount();
        Vector vct = dt.getDataVector();
        WriteTA(TA_PatientInfo,"\n\n\nFloors:\nData rows:"+rows+"---Data columns:"+columns);
        for(int i = 0; i < rows; i++){//for each row
            Vector data = (Vector)vct.get(i);
            Floors_Dev tmp = new Floors_Dev();
            Class clazz = tmp.getClass();
            for(int j = 0; j < columns; j++){//for each column
                WriteTA(TA_PatientInfo, "\n"+dt.getColumnName(j)+":"+data.get(j));
                try{
                    Method m = clazz.getMethod("set"+dt.getColumnName(j), Object.class);
                    m.invoke(tmp, data.get(j));
                }catch(Exception e){
                    System.out.println(e.getMessage());
                }
            }
            flr.add(tmp);
        }
        return flr;
    }

    private List<HR_Dev> GetHRDevFromDB(int patientID) {
        List<HR_Dev> hr = new ArrayList<>();
        GaleHRDevDAO pdao = new GaleHRDevDAO();
        DefaultTableModel dt = pdao.getTableModel(patientID);
        int rows = dt.getRowCount();
        int columns = dt.getColumnCount();
        Vector vct = dt.getDataVector();
        WriteTA(TA_PatientInfo,"\n\n\nHR:\nData rows:"+rows+"---Data columns:"+columns);
        for(int i = 0; i < rows; i++){//for each row
            Vector data = (Vector)vct.get(i);
            HR_Dev tmp = new HR_Dev();
            Class clazz = tmp.getClass();
            for(int j = 0; j < columns; j++){//for each column
                WriteTA(TA_PatientInfo, "\n"+dt.getColumnName(j)+":"+data.get(j));
                try{
                    Method m = clazz.getMethod("set"+dt.getColumnName(j), Object.class);
                    m.invoke(tmp, data.get(j));
                }catch(Exception e){
                    System.out.println(e.getMessage());
                }
            }
            hr.add(tmp);
        }
        return hr;
    }

    private List<Sleep_Dev> GetSleepDevFromDB(int patientID) {
        List<Sleep_Dev> slp = new ArrayList<>();
        GaleSleepDevDAO pdao = new GaleSleepDevDAO();
        DefaultTableModel dt = pdao.getTableModel(patientID);
        int rows = dt.getRowCount();
        int columns = dt.getColumnCount();
        Vector vct = dt.getDataVector();
        WriteTA(TA_PatientInfo,"\n\n\nSleep:\nData rows:"+rows+"---Data columns:"+columns);
        for(int i = 0; i < rows; i++){//for each row
            Vector data = (Vector)vct.get(i);
            Sleep_Dev tmp = new Sleep_Dev();
            Class clazz = tmp.getClass();
            for(int j = 0; j < columns; j++){//for each column
                WriteTA(TA_PatientInfo, "\n"+dt.getColumnName(j)+":"+data.get(j));
                try{
                    Method m = clazz.getMethod("set"+dt.getColumnName(j), Object.class);
                    m.invoke(tmp, data.get(j));
                }catch(Exception e){
                    System.out.println(e.getMessage());
                }
            }
            slp.add(tmp);
        }
        return slp;
    }

    private List<Steps_Dev> GetStepsDevFromDB(int patientID) {
        List<Steps_Dev> stp = new ArrayList<>();
        GaleStepsDevDAO pdao = new GaleStepsDevDAO();
        DefaultTableModel dt = pdao.getTableModel(patientID);
        int rows = dt.getRowCount();
        int columns = dt.getColumnCount();
        Vector vct = dt.getDataVector();
        WriteTA(TA_PatientInfo,"\n\n\nSteps:\nData rows:"+rows+"---Data columns:"+columns);
        for(int i = 0; i < rows; i++){//for each row
            Vector data = (Vector)vct.get(i);
            Steps_Dev tmp = new Steps_Dev();
            Class clazz = tmp.getClass();
            for(int j = 0; j < columns; j++){//for each column
                WriteTA(TA_PatientInfo, "\n"+dt.getColumnName(j)+":"+data.get(j));
                try{
                    Method m = clazz.getMethod("set"+dt.getColumnName(j), Object.class);
                    m.invoke(tmp, data.get(j));
                }catch(Exception e){
                    System.out.println(e.getMessage());
                }
            }
            stp.add(tmp);
        }
        return stp;
    }

    private List<Weight_Dev> GetWeightDevFromDB(int patientID) {
        List<Weight_Dev> wgt = new ArrayList<>();
        GaleWeightDevDAO pdao = new GaleWeightDevDAO();
        DefaultTableModel dt = pdao.getTableModel(patientID);
        int rows = dt.getRowCount();
        int columns = dt.getColumnCount();
        Vector vct = dt.getDataVector();
        WriteTA(TA_PatientInfo,"\n\n\nWeight:\nData rows:"+rows+"---Data columns:"+columns);
        for(int i = 0; i < rows; i++){//for each row
            
            Vector data = (Vector)vct.get(i);
            Weight_Dev tmp = new Weight_Dev();
            Class clazz = tmp.getClass();
            for(int j = 0; j < columns; j++){//for each column
                WriteTA(TA_PatientInfo, "\n"+dt.getColumnName(j)+":"+data.get(j));
                try{
                    Method m = clazz.getMethod("set"+dt.getColumnName(j), Object.class);
                    m.invoke(tmp, data.get(j));
                }catch(Exception e){
                    System.out.println(e.getMessage());
                }
            }
            wgt.add(tmp);
        }
        return wgt;
    }
}
