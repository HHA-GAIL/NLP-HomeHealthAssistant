/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import GaleDTRules.DAO.GalePatientDAO;
import GaleDTRules.Classes.*;
import GaleDTRules.DAO.GaleBMIDevDAO;
import GaleDTRules.DAO.GaleFloorsDevDAO;
import GaleDTRules.DAO.GaleHRDevDAO;
import GaleDTRules.DAO.GaleSleepDevDAO;
import GaleDTRules.DAO.GaleStepsDevDAO;
import GaleDTRules.DAO.GaleWeightDevDAO;
import com.sun.javafx.scene.control.skin.VirtualFlow;
import java.lang.reflect.Method;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import javax.swing.JTextArea;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author HASEE
 */
public class dtRulesTestingGUI extends javax.swing.JFrame {

    List<Patients> patientList = new LinkedList<>();
    
    /**
     * Creates new form dtRulesTestingGUI
     */
    public dtRulesTestingGUI() {
        initComponents();
        this.setTitle("DTRulesTesting...");
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        INPT_PName = new javax.swing.JTextField();
        Btn_Search = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TA_PatientInfo = new javax.swing.JTextArea();
        Btn_Run = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        TA_Results = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("DTRules_Testing_Panel");

        Btn_Search.setText("Search");
        Btn_Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_SearchActionPerformed(evt);
            }
        });

        jLabel2.setText("Patient's Name:");

        TA_PatientInfo.setEditable(false);
        TA_PatientInfo.setColumns(20);
        TA_PatientInfo.setLineWrap(true);
        TA_PatientInfo.setRows(5);
        TA_PatientInfo.setText("The information of the certain Patient will be placed here...");
        jScrollPane1.setViewportView(TA_PatientInfo);

        Btn_Run.setText("Run in DTRulesEngine...");
        Btn_Run.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_RunActionPerformed(evt);
            }
        });

        TA_Results.setEditable(false);
        TA_Results.setColumns(20);
        TA_Results.setRows(5);
        TA_Results.setText("The result will be placed here...");
        jScrollPane2.setViewportView(TA_Results);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2)
                    .addComponent(Btn_Run, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(INPT_PName, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(21, 21, 21)
                                .addComponent(Btn_Search)))
                        .addGap(0, 216, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(INPT_PName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Btn_Search)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Btn_Run)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Btn_SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_SearchActionPerformed
        // TODO add your handling code here:
        WriteTA(TA_PatientInfo,"\nGetting Patient info from database...\n"+System.getProperty("user.dir")+"/DTRules/");
        String patientName = INPT_PName.getText();
        GalePatientDAO pdao = new GalePatientDAO();
        Object result = pdao.getTableModel(patientName);
        DefaultTableModel dt = (DefaultTableModel)result;
        int rows = dt.getRowCount();
        int columns = dt.getColumnCount();
        Vector vct = dt.getDataVector();
        WriteTA(TA_PatientInfo,"\nDone.\nData rows:"+rows+"---Data columns:"+columns);
        for(int i = 0; i < rows; i++){//for each row
            Vector data = (Vector)vct.get(i);
            Patients tmp = new Patients();
            Class clazz = tmp.getClass();
            for(int j = 0; j < columns; j++){//for each column
                WriteTA(TA_PatientInfo, "\n"+dt.getColumnName(j)+":"+data.get(j));
                try{
                    Method m = clazz.getMethod("set"+dt.getColumnName(j), Object.class);
                    m.invoke(tmp, data.get(j));
                }catch(Exception e){
                    System.out.println(e.getMessage());
                }
            }
            //Get the all six Dev data from database here
            List<BMI_Dev> bmilist = GetBMIDevFromDB(tmp.getPatientID());
            List<Floors_Dev> floorlist = GetFloorsDevFromDB(tmp.getPatientID());
            List<HR_Dev> hrlist = GetHRDevFromDB(tmp.getPatientID());
            List<Sleep_Dev> sleeplist = GetSleepDevFromDB(tmp.getPatientID());
            List<Steps_Dev> stepslist = GetStepsDevFromDB(tmp.getPatientID());
            List<Weight_Dev> weightlist = GetWeightDevFromDB(tmp.getPatientID());
            tmp.setBMI_Devs(bmilist);
            tmp.setFloors_Devs(floorlist);
            tmp.setHR_Devs(hrlist);
            tmp.setSleep_Devs(sleeplist);
            tmp.setSteps_Devs(stepslist);
            tmp.setWeight_Devs(weightlist);
            patientList.add(tmp);
        }
        SimpleDateFormat bartDateFormat = new SimpleDateFormat("yyyy-MM-dd");
        for(Patients pt: patientList){
            WriteTA(TA_Results, "\nname:"+pt.getFullName());
            WriteTA(TA_Results, "\nage:"+pt.getAge());
            WriteTA(TA_Results, "\ngender"+pt.getGender());
            WriteTA(TA_Results, "\nmember since:"+bartDateFormat.format(pt.getMemberSince()));
        }
        WriteTA(TA_PatientInfo, "\n\nDONE!");
    }//GEN-LAST:event_Btn_SearchActionPerformed

    private void Btn_RunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_RunActionPerformed
        // TODO add your handling code here:
        edu.dhu.DTRules.DTRulesPatientDev dtrpd = new edu.dhu.DTRules.DTRulesPatientDev();
        edu.dhu.DTRules.entities.Patient patient = com.dtrules.samples.sampleproject2.DataGenerater.GenerateDTRulesPatient();
        if(patientList.size() == 0)
            return;
        for(Patients pt : patientList){
            List<edu.dhu.DTRules.entities.Result> results = dtrpd.doExamine((edu.dhu.DTRules.entities.Patient)pt.ConvertToDTRulesDataType(),
                    edu.dhu.DTRules.DTRulesPatientDev.BasePath , 
                    edu.dhu.DTRules.DTRulesPatientDev.ConfigFileFileName, 
                    edu.dhu.DTRules.DTRulesPatientDev.RuleName_PatientDemo,
                    edu.dhu.DTRules.DTRulesPatientDev.EntryTable);
            WriteTA(TA_Results, "\n\nResult of patient "+pt.getFullName());
            for(edu.dhu.DTRules.entities.Result result : results){
                WriteTA(TA_Results, "\n"+result.getResultCode()+"--->"+result.getResultMessage());
            }
        }
    }//GEN-LAST:event_Btn_RunActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(dtRulesTestingGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(dtRulesTestingGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(dtRulesTestingGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(dtRulesTestingGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new dtRulesTestingGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Btn_Run;
    private javax.swing.JButton Btn_Search;
    private javax.swing.JTextField INPT_PName;
    private javax.swing.JTextArea TA_PatientInfo;
    private javax.swing.JTextArea TA_Results;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

    private void WriteTA(JTextArea Ta, String message) {
        Ta.append(message);
        Ta.setCaretPosition(Ta.getDocument().getLength());
    }

    private List<BMI_Dev> GetBMIDevFromDB(int patientID) {
        List<BMI_Dev> bmi = new ArrayList<>();
        GaleBMIDevDAO pdao = new GaleBMIDevDAO();
        DefaultTableModel dt = pdao.getTableModel(patientID);
        int rows = dt.getRowCount();
        int columns = dt.getColumnCount();
        Vector vct = dt.getDataVector();
        WriteTA(TA_PatientInfo,"\n\n\nBMI:\nData rows:"+rows+"---Data columns:"+columns);
        for(int i = 0; i < rows; i++){//for each row
            Vector data = (Vector)vct.get(i);
            BMI_Dev tmp = new BMI_Dev();
            Class clazz = tmp.getClass();
            for(int j = 0; j < columns; j++){//for each column
                WriteTA(TA_PatientInfo, "\n"+dt.getColumnName(j)+":"+data.get(j));
                try{
                    Method m = clazz.getMethod("set"+dt.getColumnName(j), Object.class);
                    m.invoke(tmp, data.get(j));
                }catch(Exception e){
                    System.out.println(e.getMessage());
                }
            }
            bmi.add(tmp);
        }
        return bmi;
    }

    private List<Floors_Dev> GetFloorsDevFromDB(int patientID) {
        List<Floors_Dev> flr = new ArrayList<>();
        GaleFloorsDevDAO pdao = new GaleFloorsDevDAO();
        DefaultTableModel dt = pdao.getTableModel(patientID);
        int rows = dt.getRowCount();
        int columns = dt.getColumnCount();
        Vector vct = dt.getDataVector();
        WriteTA(TA_PatientInfo,"\n\n\nFloors:\nData rows:"+rows+"---Data columns:"+columns);
        for(int i = 0; i < rows; i++){//for each row
            Vector data = (Vector)vct.get(i);
            Floors_Dev tmp = new Floors_Dev();
            Class clazz = tmp.getClass();
            for(int j = 0; j < columns; j++){//for each column
                WriteTA(TA_PatientInfo, "\n"+dt.getColumnName(j)+":"+data.get(j));
                try{
                    Method m = clazz.getMethod("set"+dt.getColumnName(j), Object.class);
                    m.invoke(tmp, data.get(j));
                }catch(Exception e){
                    System.out.println(e.getMessage());
                }
            }
            flr.add(tmp);
        }
        return flr;
    }

    private List<HR_Dev> GetHRDevFromDB(int patientID) {
        List<HR_Dev> hr = new ArrayList<>();
        GaleHRDevDAO pdao = new GaleHRDevDAO();
        DefaultTableModel dt = pdao.getTableModel(patientID);
        int rows = dt.getRowCount();
        int columns = dt.getColumnCount();
        Vector vct = dt.getDataVector();
        WriteTA(TA_PatientInfo,"\n\n\nHR:\nData rows:"+rows+"---Data columns:"+columns);
        for(int i = 0; i < rows; i++){//for each row
            Vector data = (Vector)vct.get(i);
            HR_Dev tmp = new HR_Dev();
            Class clazz = tmp.getClass();
            for(int j = 0; j < columns; j++){//for each column
                WriteTA(TA_PatientInfo, "\n"+dt.getColumnName(j)+":"+data.get(j));
                try{
                    Method m = clazz.getMethod("set"+dt.getColumnName(j), Object.class);
                    m.invoke(tmp, data.get(j));
                }catch(Exception e){
                    System.out.println(e.getMessage());
                }
            }
            hr.add(tmp);
        }
        return hr;
    }

    private List<Sleep_Dev> GetSleepDevFromDB(int patientID) {
        List<Sleep_Dev> slp = new ArrayList<>();
        GaleSleepDevDAO pdao = new GaleSleepDevDAO();
        DefaultTableModel dt = pdao.getTableModel(patientID);
        int rows = dt.getRowCount();
        int columns = dt.getColumnCount();
        Vector vct = dt.getDataVector();
        WriteTA(TA_PatientInfo,"\n\n\nSleep:\nData rows:"+rows+"---Data columns:"+columns);
        for(int i = 0; i < rows; i++){//for each row
            Vector data = (Vector)vct.get(i);
            Sleep_Dev tmp = new Sleep_Dev();
            Class clazz = tmp.getClass();
            for(int j = 0; j < columns; j++){//for each column
                WriteTA(TA_PatientInfo, "\n"+dt.getColumnName(j)+":"+data.get(j));
                try{
                    Method m = clazz.getMethod("set"+dt.getColumnName(j), Object.class);
                    m.invoke(tmp, data.get(j));
                }catch(Exception e){
                    System.out.println(e.getMessage());
                }
            }
            slp.add(tmp);
        }
        return slp;
    }

    private List<Steps_Dev> GetStepsDevFromDB(int patientID) {
        List<Steps_Dev> stp = new ArrayList<>();
        GaleStepsDevDAO pdao = new GaleStepsDevDAO();
        DefaultTableModel dt = pdao.getTableModel(patientID);
        int rows = dt.getRowCount();
        int columns = dt.getColumnCount();
        Vector vct = dt.getDataVector();
        WriteTA(TA_PatientInfo,"\n\n\nSteps:\nData rows:"+rows+"---Data columns:"+columns);
        for(int i = 0; i < rows; i++){//for each row
            Vector data = (Vector)vct.get(i);
            Steps_Dev tmp = new Steps_Dev();
            Class clazz = tmp.getClass();
            for(int j = 0; j < columns; j++){//for each column
                WriteTA(TA_PatientInfo, "\n"+dt.getColumnName(j)+":"+data.get(j));
                try{
                    Method m = clazz.getMethod("set"+dt.getColumnName(j), Object.class);
                    m.invoke(tmp, data.get(j));
                }catch(Exception e){
                    System.out.println(e.getMessage());
                }
            }
            stp.add(tmp);
        }
        return stp;
    }

    private List<Weight_Dev> GetWeightDevFromDB(int patientID) {
        List<Weight_Dev> wgt = new ArrayList<>();
        GaleWeightDevDAO pdao = new GaleWeightDevDAO();
        DefaultTableModel dt = pdao.getTableModel(patientID);
        int rows = dt.getRowCount();
        int columns = dt.getColumnCount();
        Vector vct = dt.getDataVector();
        WriteTA(TA_PatientInfo,"\n\n\nWeight:\nData rows:"+rows+"---Data columns:"+columns);
        for(int i = 0; i < rows; i++){//for each row
            
            Vector data = (Vector)vct.get(i);
            Weight_Dev tmp = new Weight_Dev();
            Class clazz = tmp.getClass();
            for(int j = 0; j < columns; j++){//for each column
                WriteTA(TA_PatientInfo, "\n"+dt.getColumnName(j)+":"+data.get(j));
                try{
                    Method m = clazz.getMethod("set"+dt.getColumnName(j), Object.class);
                    m.invoke(tmp, data.get(j));
                }catch(Exception e){
                    System.out.println(e.getMessage());
                }
            }
            wgt.add(tmp);
        }
        return wgt;
    }
}
